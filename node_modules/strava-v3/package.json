{
  "name": "strava-v3",
  "version": "1.12.1",
  "description": "Simple wrapper for strava v3 api",
  "main": "index.js",
  "scripts": {
    "test": "grunt jshint simplemocha --force"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/unboundev/node-strava-v3.git"
  },
  "keywords": [
    "strava",
    "node",
    "api"
  ],
  "author": {
    "name": "austin brown",
    "email": "austin@unboundev.com",
    "url": "http://austinjamesbrown.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/unboundev/node-strava-v3/issues"
  },
  "homepage": "https://github.com/unboundev/node-strava-v3",
  "dependencies": {
    "request": "^2.64.0"
  },
  "devDependencies": {
    "es6-promise": "^3.2.1",
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-simple-mocha": "^0.4.1",
    "mocha": "^1.21.5",
    "mock-fs": "^3.9.0",
    "should": "^4.6.5",
    "sinon": "^1.17.4"
  },
  "readme": "\n# strava-v3: Simple Node wrapper for Strava's v3 API\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n\n[npm-image]: https://img.shields.io/npm/v/strava-v3.svg?style=flat\n[npm-url]: https://npmjs.org/package/strava-v3\n[downloads-image]: https://img.shields.io/npm/dm/strava-v3.svg?style=flat\n[downloads-url]: https://npmjs.org/package/strava-v3\n[travis-image]: https://travis-ci.org/UnbounDev/node-strava-v3.svg?branch=master&style=flat\n[travis-url]: https://travis-ci.org/UnbounDev/node-strava-v3\n\n### Status\nSupports API functionality for all API endpoints from `oauth` to `uploads`:\n\n* `oauth`\n* `athlete`\n* `athletes`\n* `activities`\n* `clubs`\n* `gear`\n* `routes`\n* `segments`\n* `segment_efforts`\n* `streams`\n* `uploads`\n\n## Installation\n\n```bash\n\t\tnpm install strava-v3\n```\n\n## Quick start\n\n* Create an application at [strava.com/developers](http://www.strava.com/developers) and make note of your `access_token`\n* from the root of your node application: `$ npm install strava-v3`\n* `$ mkdir data`\n* `$ cp node_modules/strava-v3/strava_config data/strava_config`\n* Open `data/strava_config` in your favorite text editor and supply your applications `access_token` to the `access_token` field\n* Use it!\n\n```js\n\t\tvar strava = require('strava-v3');\n\t\tstrava.athlete.get({},function(err,payload) {\n\t\t\tif(!err) {\n\t\t\t\tconsole.log(payload);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t});\n```\n\n## Resources\n\n* [Strava Developers Center](http://www.strava.com/developers)\n* [Strava API Reference](http://strava.github.io/api/)\n\n## Usage\n\n### Config and Environment Variables\n\nThe template `strava_config` file can be found at the modules root directory and has the following structure\n\n```json\n{\n    \"access_token\"    :\"Your apps access token (Required for Quickstart)\"\n    , \"client_id\"     :\"Your apps Client ID (Required for oauth)\"\n    , \"client_secret\" :\"Your apps Client Secret (Required for oauth)\"\n    , \"redirect_uri\"  :\"Your apps Authorization Redirection URI (Required for oauth)\"\n}\n```\n\nYou may alternatively supply the values via environment variables named following the convention `STRAVA_<keyName>`, so\n\n- `STRAVA_ACCESS_TOKEN` = `access_token`\n- `STRAVA_CLIENT_ID` = `client_id`\n- `STRAVA_CLIENT_SECRET` = `client_secret`\n- `STRAVA_REDIRECT_URI` = `redirect_uri`\n\n### General\n\nAPI access is designed to be as closely similar in layout as possible to Strava's own architecture,\nwith the general call definition being\n\n```js\n\t\tvar strava = require('strava-v3')\n\t\tstrava.<api endpoint>.<api endpoint option>(args,callback)\n```\n\nExample usage:\n\n```js\n\t\tvar strava = require('strava-v3');\n\t\tstrava.athletes.get({id:12345},function(err,payload) {\n\t\t\t//do something with your payload\n\t\t});\n```\n\n### Overriding the default `access_token`\n\nYou'll probably want to do this with every call once your app is in production, using an `access_token` specific to a validated user allows for detailed athlete information, as well as the option for additional `PUT`/`POST`/`DELETE` privileges.\n\nJust add the property `'access_token':'your access_token'` to the `args` parameter of your call, the wrapper will use the provided `access_token` instead of the default in `data/strava_config`.\n\nExample usage:\n\n```js\n\t\tvar strava = require('strava-v3');\n\t\tstrava.athlete.get({'access_token':'abcde'},function(err,payload) {\n\t\t\t//do something with your payload\n\t\t});\n```\n\n### Dealing with pagination\n\nFor those API calls that support pagination, you can control both the `page` being retrieved and the number of responses to return `per_page` by adding the corresponding properties to `args`.\n\nExample usage:\n\n```js\n\t\tvar strava = require('strava-v3');\n\t\tstrava.athlete.getFollowers({\n\t\t\t'page':1\n\t\t\t, 'per_page':2\n\t\t},function(err,payload) {\n\t\t\t//do something with your payload\n\t\t});\n```\n\n### Uploading files\nTo upload a file you'll have to pass in the `data_type` as specified in Strava's API reference as well as a string `file` designating the `<filepath>/<filename>`. If you want to get updates on the status of your upload pass in `statusCallback` along with the rest of your `args` - the wrapper will check on the upload once a second until complete.\n\nExample usage:\n\n```js\n\t\tvar strava = require('strava-v3');\n\t\tstrava.uploads.post({\n\t\t\t'data_type':'gpx'\n\t\t\t, 'file': 'data/your_file.gpx'\n\t\t\t, 'name': 'Epic times'\n\t\t\t, 'statusCallback': function(err,payload) {\n\t\t\t\t//do something with your payload\n\t\t\t}\n\t\t},function(err,payload) {\n\t\t\t//do something with your payload\n\t\t});\n```\n\n### Supported API Endpoints\n\nOauth:\n\n* `strava.oauth.getRequestAccessURL(args)`\n* `strava.oauth.getToken(code,done)`\n* `strava.oauth.deauthorize(args,done)`\n\nAthlete:\n\n* `strava.athlete.get(args,done)`\n* `strava.athlete.update(args,done)`\n* `strava.athlete.listFriends(args,done)`\n* `strava.athlete.listFollowers(args,done)`\n* `strava.athlete.listActivities(args,done)`\n* `strava.athlete.listRoutes(args,done)`\n* `strava.athlete.listClubs(args,done)`\n\nAthletes:\n\n* `strava.athletes.get(args,done)`\n* `strava.athletes.listFriends(args,done)`\n* `strava.athletes.listFollowers(args,done)`\n*\t`strava.athletes.stats(args,done)`\n* `strava.athletes.listKoms(args,done)`\n* `strava.athletes.stats(args,done)`\n\nActivities:\n\n* `strava.activities.get(args,done)`\n* `strava.activities.create(args,done)`\n* `strava.activities.update(args,done)`\n* `strava.activities.delete(args,done)`\n* `strava.activities.listFriends(args,done)`\n* `strava.activities.listZones(args,done)`\n* `strava.activities.listLaps(args,done)`\n* `strava.activities.listComments(args,done)`\n* `strava.activities.listKudos(args,done)`\n* `strava.activities.listPhotos(args,done)`\n* `strava.activities.listRelated(args,done)`\n\nClubs:\n* `strava.clubs.get(args,done)`\n* `strava.clubs.listMembers(args,done)`\n* `strava.clubs.listActivities(args,done)`\n* `strava.clubs.listAnnouncements(args,done)`\n* `strava.clubs.listEvents(args,done)`\n* `strava.clubs.listAdmins(args,done)`\n* `strava.clubs.joinClub(args,done)`\n* `strava.clubs.leaveClub(args,done)`\n\nGear:\n* `strava.gear.get(args,done)`\n\nRoutes:\n* `strava.routes.get(args,done)`\n\nSegments:\n* `strava.segments.get(args,done)`\n* `strava.segments.listStarred(args,done)`\n* `strava.segments.listEfforts(args,done)`\n* `strava.segments.listLeaderboard(args,done)`\n* `strava.segments.explore(args,done)`\n\nSegment Efforts:\n* `strava.segmentEfforts.get(args,done)`\n\nStreams:\n* `strava.streams.activity(args,done)`\n* `strava.streams.effort(args,done)`\n* `strava.streams.segment(args,done)`\n\nUploads:\n* `strava.uploads.post(args,done)`\n\n## Development\n\nThis package includes a full test suite runnable via `grunt jshint simplemocha` or `npm test`,\nand will both delint and run shallow tests on API endpoints.\n\n### Running the tests\n\nYou'll first need to supply `data/strava_config` with an `access_token` that has both private read and write permissions:\n\n* Make sure you've filled out all the fields in `data/strava_config`.\n* Use `strava.oauth.getRequestAccessURL({scope:\"view_private write\"})` to generate the request url and query it via your browser.\n* Strava will prompt you (the user) to allow access, say yes and you'll be sent to your Authorization Redirection URI - the parameter `code` will be included in the redirection url.\n* Exchange the `code` for a new `access_token`:\n\n```js\n\t\tstrava.oauth.getToken(code,function(err,payload) {\n\t\t\tconsole.log(payload);\n\t\t});\n```\n\n* You're done! Paste the new `access_token` to `data/strava_config` and go run some tests:\n\n`grunt jshint simplemocha` or `npm test`.\n\n### How the tests work\n\nUsing the provided `access_token` tests will access each endpoint individually:\n\n* (For all `GET` endpoints) checks to ensure the correct type has been returned from the Strava.\n* (For `PUT` in `athlete.update`) changes some athlete properties, then changes them back.\n* (For `POST/PUT/DELETE` in `activities.create/update/delete`) first creates an activity, runs some operations on it, then deletes it.\n",
  "readmeFilename": "README.md",
  "_id": "strava-v3@1.12.1",
  "_from": "strava-v3@"
}
